const { expectRevert } = require("@openzeppelin/test-helpers");
// Import mock ERC20 tokens.
const Dai = artifacts.require("mocks/Dai.sol");
const Bat = artifacts.require("mocks/Bat.sol");
const Rep = artifacts.require("mocks/Rep.sol");
const Zrx = artifacts.require("mocks/Zrx.sol");

// Import contract abstraction of the Decentralized Exchange
const Dex = artifacts.require("Dex.sol");

// Create byte32 variables using web3 for ticker argument
const [DAI, BAT, REP, ZRX] = ["DAI", "BAT", "REP", "ZRX"].map((ticker) =>
  web3.utils.fromAscii(ticker)
);

// Define cotract block to write tests.
contract("Dex", (accounts) => {
  // accounts --> list of addresses generated by local development blockchain.
  // Variables pointing to ERC20 tokens.
  let dai, bat, rep, zrx, dex;

  const [trader1, trader2] = [accounts[1], accounts[2]];
  // We start with accounts[1] because accounts[0] is admin.

  // Deploy tokens in a before-each hook (Runs before each test).
  beforeEach(async () => {
    [dai, bat, rep, zrx] = await Promise.all([
      // Returns an array of four contract instances,
      // Stored one in each variable by 'Array Destructuring'.
      Dai.new(),
      Bat.new(),
      Rep.new(),
      Zrx.new(),
    ]);
    dex = await Dex.new(); // Deploy Dex smart contract.
    // Configure ERC20 tokens in the Dex (Call addToken for each token)
    await Promise.all([
      dex.addToken(DAI, dai.address),
      dex.addToken(BAT, bat.address),
      dex.addToken(REP, rep.address),
      dex.addToken(ZRX, zrx.address),
    ]);

    // Specify the initial token amount.
    const amount = web3.utils.toWei("1000");

    // Function to allocate ERC20 tokens
    const seedTokenBalance = async (token, trader) => {
      // Allocate token to an address.
      await token.faucet(trader, amount);
      // Trader approves the Dex smart contract to transfer tokens.
      await token.approve(dex.address, amount, { from: trader });
    };

    // Loop through all tokens and call seedTokenBalance function.
    await Promise.all(
      [dai, bat, rep, zrx].map((token) => seedTokenBalance(token, trader1))
    );
    await Promise.all(
      [dai, bat, rep, zrx].map((token) => seedTokenBalance(token, trader2))
    );
  });
  //   Test deposit()----Happy Path
  it("should deposit tokens", async () => {
    const amount = web3.utils.toWei("100");

    await dex.deposit(amount, DAI, { from: trader1 });
    const balance = await dex.traderBalances(trader1, DAI);
    assert(balance.toString() === amount);
  });
  // Test deposit()---Unhappy Path
  it("should NOT deposit token if token does not exist", async () => {
    await expectRevert(
      dex.deposit(
        web3.utils.toWei("100"),
        web3.utils.fromAscii("TOKEN-DOES-NOT-EXIST"),
        { from: trader1 }
      ),
      "Token does not exist!"
    );
  });
  // Test withdraw()---Happy Path
  it("Should withdraw tokens", async () => {
    const amount = web3.utils.toWei("100");

    await dex.deposit(amount, DAI, { from: trader1 });

    await dex.withdraw(amount, DAI, { from: trader1 });

    const [balanceDex, balanceDai] = await Promise.all([
      dex.traderBalances(trader1, DAI),
      dai.balanceOf(trader1),
    ]);

    assert(balanceDex.isZero());
    assert(balanceDai.toString() === web3.utils.toWei("1000"));
  });
  // Test withdraw()---Unhappy Path
  it("Should NOT withdraw tokens if token does not exist", async () => {
    await expectRevert(
      dex.withdraw(
        web3.utils.toWei("100"),
        web3.utils.fromAscii("Token-does-not-exist"),
        { from: trader1 }
      ),
      "Token does not exist!"
    );
  });
  it("Should NOT withdraw tokens if balance is too low", async () => {
    await dex.deposit(web3.utils.toWei("100"), DAI, { from: trader1 });
    await expectRevert(
      dex.withdraw(web3.utils.toWei("1000"), DAI, { from: trader1 }),
      "Balance too low!"
    );
  });
});
